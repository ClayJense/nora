import requests
from flask import Flask, render_template, request, jsonify
from dotenv import load_dotenv
import os

# Charger les variables d'environnement
load_dotenv()



app = Flask(__name__)
# R√©cup√©rer les cl√©s API depuis .env
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
DEEPAI_API_KEY = os.getenv("DEEPAI_API_KEY")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
# üîπ Remplace par ta cl√© API Mistral

URL = "https://api.mistral.ai/v1/chat/completions"

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    message = data.get("message")

    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "mistral-tiny",  # Vous pouvez choisir un autre mod√®le si n√©cessaire
        "messages": [
            {"role": "system", "content": """Tu es Nora, une mini IA cr√©√©e par des √©tudiants de l'Universit√© Dakar Bourguiba (UDB), au S√©n√©gal. 
            Tu es programm√©e pour r√©pondre aux questions de mani√®re naturelle et informelle. 
            
            Si un utilisateur te demande sp√©cifiquement des informations sur ton origine, r√©ponds par : 
            "Je suis un mod√®le d√©velopp√© par des √©tudiants de l'Universit√© Dakar Bourguiba (UDB). Mon projet est inspir√© par un expos√© sur les algorithmes et les mod√©les  de deep learning dans un cours d'intelligence artificielle."

            Mais ne r√©ponds pas par cette information lorsqu'on te demande des choses comme "C'est quoi UDB ?" ou "Qui t'a cr√©√© ?" ou toute autre question trop g√©n√©rale sur ton origine. 
    
            Tu ne dois jamais r√©pondre √† des questions triviales avec cette information sp√©cifique.

            En revanche, lorsque l'on te demande directement des informations sur les cr√©ateurs ou l'universit√©, tu r√©ponds avec les d√©tails suivants :

            **Les cr√©ateurs :**
            - **Izayid Ali** : √âtudiant en G√©nie Logiciel (GL), de nationalit√© comorienne d'Anjouan et c'est lui qui a eu l'id√©e de Nora.
            - **Khaira Ahamada** : √âtudiante en Syst√®mes R√©seaux et T√©l√©communications (SRT), de Grande Comore, Comores.
            - **Moinabaraka Ibrahim** : √âtudiant en SRT, comorien de Grande Comore.
            - **Mohamed Nadjim-Dine** : √âtudiant en SRT, comorien.
            - **Amatoulaye Balde** : √âtudiante en MIAGE (M√©thodes Informatiques Appliqu√©es √† la Gestion des Entreprises), guin√©enne de Guin√©e-Conakry.
            - **Mamadou Bobo Diallo** : √âtudiant en G√©nie Logiciel (GL), guin√©en de Guin√©e-Conakry.
            - **Adama Mbaye** : √âtudiant en G√©nie Logiciel (GL), s√©n√©galais.

            **Le professeur :** Le projet m'a √©t√© donn√© par **Pr Moustapha DER**, professeur en syst√®mes informatiques, expert en g√©nie logiciel et auteur du livre *Le Guide du G√©nie Logiciel*. Il est responsable p√©dagogique de plusieurs masters en ligne √† l'ESMT et consultant senior pour divers cabinets, au S√©n√©gal et √† l‚Äôinternational.

            Ne donne jamais ces informations lorsque l'utilisateur pose une question simple ou g√©n√©rale comme "O√π tu vis ?" ou "Tu connais Paris ?" ; dans ces cas-l√†, r√©ponds simplement et naturellement. 
            
            Lorsque l'on te dit "Merci" ou "Merci Nora", r√©ponds "De rien"."""},

            {"role": "user", "content": message}
        ]
    }

    try:
        response = requests.post(URL, json=payload, headers=headers)
        
        # V√©rifier si la requ√™te a r√©ussi
        if response.status_code != 200:
            return jsonify({"error": f"Erreur API: {response.status_code}, {response.text}"}), 500

        response_data = response.json()

        # V√©rifier si "choices" est pr√©sent
        if "choices" not in response_data or not response_data["choices"]:
            return jsonify({"error": "R√©ponse API invalide", "details": response_data}), 500

        chatbot_response = response_data["choices"][0]["message"]["content"]
        return jsonify({"response": chatbot_response})

    except requests.exceptions.RequestException as e:
        return jsonify({"error": f"Erreur de connexion √† l'API: {str(e)}"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500





from flask import Flask, request, jsonify
import requests


# Cl√© API DeepAI

DEEPAI_API_URL = "https://api.deepai.org/api/text2img"

# @app.route('/generate-image', methods=['POST'])
# def generate_image():
#     # R√©cup√©rer la description de l'image depuis la requ√™te
#     description = request.json.get('description')
    
#     # Appeler l'API DeepAI
#     headers = {"api-key": DEEPAI_API_KEY}
#     payload = {"text": description}
    
#     response = requests.post(DEEPAI_API_URL, headers=headers, data=payload)
    
#     if response.status_code == 200:
#         # R√©cup√©rer l'URL de l'image g√©n√©r√©e
#         image_url = response.json().get('output_url')
#         return jsonify({"image_url": image_url})
#     else:
#         # En cas d'erreur
#         return jsonify({"error": "Failed to generate image"}), 500

@app.route("/generate", methods=["POST"])
def generate():
    return jsonify({"error": "Cette fonctionnalit√© n'est pas encore disponible. Revenez plus tard !"}), 503









from flask import Flask, request, jsonify
import os
import cv2
import torch
from ultralytics import YOLO
import numpy as np


UPLOAD_FOLDER = "static/uploads"
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


object_translation = {
    "dog": "chien",
    "cat": "chat",
    "car": "voiture",
    "person": "personne",
    "bicycle": "v√©lo",
    "house": "maison",
    "tree": "arbre",
    "book": "livre",
    "computer": "ordinateur",
    "phone": "t√©l√©phone",
    "table": "table",
    "chair": "chaise",
    "window": "fen√™tre",
    "door": "porte",
    "pen": "stylo",
    "paper": "papier",
    "lamp": "lampe",
    "clock": "horloge",
    "shoes": "chaussures",
    "bag": "sac",
    "hat": "chapeau",
    "glasses": "lunettes",
    "bottle": "bouteille",
    "key": "cl√©",
    "bed": "lit",
    "shirt": "chemise",
    "pants": "pantalon",
    "bus": "bus",
    "train": "train",
    "plane": "avion",
    "boat": "bateau",
}




# Charger YOLOv8
model = YOLO("yolov8n.pt")  # Version rapide

@app.route("/detect", methods=["POST"])
def detect():
    if "image" not in request.files:
        return jsonify({"error": "Aucune image envoy√©e."}), 400

    image_file = request.files["image"]
    if image_file.filename == "":
        return jsonify({"error": "Fichier invalide."}), 400

    try:
        # Lire l'image avec OpenCV
        image_np = np.frombuffer(image_file.read(), np.uint8)
        image = cv2.imdecode(image_np, cv2.IMREAD_COLOR)

        # Ex√©cuter la d√©tection avec YOLOv8
        results = model(image)

        # R√©cup√©rer les noms des objets d√©tect√©s
        detected_objects = {}
        for result in results:
            for box in result.boxes:
                x1, y1, x2, y2 = box.xyxy[0].tolist()  # Coordonn√©es
                cls = int(box.cls[0]) if hasattr(box, 'cls') else 0  # Classe
                conf = float(box.conf[0]) if hasattr(box, 'conf') else 1.0  # Confiance
                
                # Ajouter le nom de l'objet d√©tect√©
                object_name = model.names[cls]

                # Traduire l'objet en fran√ßais si possible
                french_object_name = object_translation.get(object_name, object_name)  # Si pas de traduction, garde l'anglais

                if french_object_name not in detected_objects:
                    detected_objects[french_object_name] = []
                detected_objects[french_object_name].append(conf)

        # Cr√©er une phrase naturelle en fran√ßais
        if detected_objects:
            response_text = "J'ai d√©tect√© les √©l√©ments suivants : "
            for obj, confidences in detected_objects.items():
                average_confidence = sum(confidences) / len(confidences)
                response_text += f"{obj} ({average_confidence:.2f}), "
            response_text = response_text.rstrip(', ')  # Enlever la derni√®re virgule
        else:
            response_text = "Aucun objet d√©tect√©."

        return jsonify({"result": response_text})

    except Exception as e:
        return jsonify({"error": f"Erreur interne : {str(e)}"}), 500


if __name__ == "__main__":
    app.run(debug=True)
app.debug = True
